import{B as s}from"./BasicRest-BML1C-ua.js";class n extends s{constructor(){super("/api/admin/combos")}async getAsProducts(){try{const o=await fetch("/api/combos-as-products",{method:"GET",headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!o.ok)throw new Error(`HTTP error! status: ${o.status}`);const t=await o.json();return t.status?{data:t.data}:(console.error("Error getting combos as products:",t.message),{data:[]})}catch(o){return console.error("Error in getAsProducts:",o),{data:[]}}}async getAsProduct(o){try{const t=await fetch(`/api/combos-as-products/${o}`,{method:"GET",headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const r=await t.json();return r.status?r.data:(console.error("Error getting combo as product:",r.message),null)}catch(t){return console.error("Error in getAsProduct:",t),null}}async addToCart(o,t=1){const r=await this.getAsProduct(o);if(!r)throw new Error("Combo not found");return{...r,quantity:t,cart_type:"combo",combo_items:r.combo_items}}async getItemCombos(o){try{const t=await fetch(`/api/items/${o}/combos`,{method:"GET",headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!t.ok)return{data:[]};const r=await t.json();return{data:r.status?r.data:[]}}catch(t){return console.error("Error getting item combos:",t),{data:[]}}}}export{n as C};
